package generator

const (
	tmplHeader = `{{- define "tmplHeader"}}
// Code generated by cool go-validate tool; DO NOT EDIT.
package {{.PackageName}}

import (
	"errors"
	"regexp"
	"strconv"
	"strings"
)

var (
	ErrFieldLen   = errors.New("validate: field does not match length")
	ErrFieldRegex = errors.New("validate: field does not match regex")
	ErrFieldIn    = errors.New("validate: field does not exists in variety")
	ErrFieldMin   = errors.New("validate: field is less than min value")
	ErrFieldMax   = errors.New("validate: field is greater than max value")

	ErrWrongType  = errors.New("wrong type of field")
)

type ValidationError struct {
	Field string
	Err   error
}

func validateLen(
	fieldName string,
	fieldValue string,
	tagValue string) (*ValidationError, error) {

	i, err := strconv.Atoi(tagValue)
	if err != nil {
		return nil, err
	}

	if len(fieldValue) != i {
		return &ValidationError{
			Field: fieldName,
			Err:   ErrFieldLen,
		}, nil
	}
	return nil, nil
}

func validateRegex(
	fieldName string,
	fieldValue string,
	tagValue string) (*ValidationError, error) {

	r := regexp.MustCompile(tagValue)

	if !r.MatchString(fieldValue) {
		return &ValidationError{
			Field: fieldName,
			Err:   ErrFieldRegex,
		}, nil
	}
	return nil, nil
}

func validateInString(
	fieldName string,
	fieldValue string,
	tagValue string) (*ValidationError, error) {

	var in bool

	for _, s := range strings.Split(tagValue, ",") {
		if fieldValue == s {
			in = true
			break
		}
	}

	if !in {
		return &ValidationError{
			Field: fieldName,
			Err:   ErrFieldIn,
		}, nil
	}
	return nil, nil
}

func validateInInt(
	fieldName string,
	fieldValue int,
	tagValue string) (*ValidationError, error) {

	var in bool

	for _, s := range strings.Split(tagValue, ",") {
		i, err := strconv.Atoi(s)
		if err != nil {
			return nil, err
		}
		if fieldValue == i {
			in = true
			break
		}
	}

	if !in {
		return &ValidationError{
			Field: fieldName,
			Err:   ErrFieldIn,
		}, nil
	}

	return nil, nil
}

func validateMin(
	fieldName string,
	fieldValue int,
	tagValue string) (*ValidationError, error) {

	i, err := strconv.Atoi(tagValue)
	if err != nil {
		return nil, err
	}

	if fieldValue < i {
		return &ValidationError{
			Field: fieldName,
			Err:   ErrFieldMin,
		}, nil
	}

	return nil, nil
}

func validateMax(
	fieldName string,
	fieldValue int,
	tagValue string) (*ValidationError, error) {

	i, err := strconv.Atoi(tagValue)
	if err != nil {
		return nil, err
	}

	if fieldValue > i {
		return &ValidationError{
			Field: fieldName,
			Err:   ErrFieldMax,
		}, nil
	}

	return nil, nil
}

{{end}}`
)
